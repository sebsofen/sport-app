/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package sebastians.sportan.networking;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class SportActivity implements org.apache.thrift.TBase<SportActivity, SportActivity._Fields>, java.io.Serializable, Cloneable, Comparable<SportActivity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SportActivity");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HOSTID_FIELD_DESC = new org.apache.thrift.protocol.TField("hostid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("sport", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("area", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CITYID_FIELD_DESC = new org.apache.thrift.protocol.TField("cityid", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MAX_PARTICIPANTS_FIELD_DESC = new org.apache.thrift.protocol.TField("max_participants", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PARTICIPANTS_FIELD_DESC = new org.apache.thrift.protocol.TField("participants", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField PARTICIPANTS_REQUESTS_FIELD_DESC = new org.apache.thrift.protocol.TField("participants_requests", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField ACT_PUBLIC_FIELD_DESC = new org.apache.thrift.protocol.TField("act_public", org.apache.thrift.protocol.TType.BOOL, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SportActivityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SportActivityTupleSchemeFactory());
  }

  public String id; // optional
  public String hostid; // optional
  public String sport; // optional
  public String area; // optional
  public String cityid; // optional
  public int max_participants; // optional
  public long date; // optional
  public String description; // optional
  public List<String> participants; // optional
  public List<String> participants_requests; // optional
  public boolean act_public; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    HOSTID((short)2, "hostid"),
    SPORT((short)3, "sport"),
    AREA((short)4, "area"),
    CITYID((short)5, "cityid"),
    MAX_PARTICIPANTS((short)6, "max_participants"),
    DATE((short)7, "date"),
    DESCRIPTION((short)8, "description"),
    PARTICIPANTS((short)9, "participants"),
    PARTICIPANTS_REQUESTS((short)10, "participants_requests"),
    ACT_PUBLIC((short)11, "act_public");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // HOSTID
          return HOSTID;
        case 3: // SPORT
          return SPORT;
        case 4: // AREA
          return AREA;
        case 5: // CITYID
          return CITYID;
        case 6: // MAX_PARTICIPANTS
          return MAX_PARTICIPANTS;
        case 7: // DATE
          return DATE;
        case 8: // DESCRIPTION
          return DESCRIPTION;
        case 9: // PARTICIPANTS
          return PARTICIPANTS;
        case 10: // PARTICIPANTS_REQUESTS
          return PARTICIPANTS_REQUESTS;
        case 11: // ACT_PUBLIC
          return ACT_PUBLIC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAX_PARTICIPANTS_ISSET_ID = 0;
  private static final int __DATE_ISSET_ID = 1;
  private static final int __ACT_PUBLIC_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.HOSTID,_Fields.SPORT,_Fields.AREA,_Fields.CITYID,_Fields.MAX_PARTICIPANTS,_Fields.DATE,_Fields.DESCRIPTION,_Fields.PARTICIPANTS,_Fields.PARTICIPANTS_REQUESTS,_Fields.ACT_PUBLIC};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOSTID, new org.apache.thrift.meta_data.FieldMetaData("hostid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPORT, new org.apache.thrift.meta_data.FieldMetaData("sport", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AREA, new org.apache.thrift.meta_data.FieldMetaData("area", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITYID, new org.apache.thrift.meta_data.FieldMetaData("cityid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_PARTICIPANTS, new org.apache.thrift.meta_data.FieldMetaData("max_participants", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTICIPANTS, new org.apache.thrift.meta_data.FieldMetaData("participants", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PARTICIPANTS_REQUESTS, new org.apache.thrift.meta_data.FieldMetaData("participants_requests", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ACT_PUBLIC, new org.apache.thrift.meta_data.FieldMetaData("act_public", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SportActivity.class, metaDataMap);
  }

  public SportActivity() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SportActivity(SportActivity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetHostid()) {
      this.hostid = other.hostid;
    }
    if (other.isSetSport()) {
      this.sport = other.sport;
    }
    if (other.isSetArea()) {
      this.area = other.area;
    }
    if (other.isSetCityid()) {
      this.cityid = other.cityid;
    }
    this.max_participants = other.max_participants;
    this.date = other.date;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetParticipants()) {
      List<String> __this__participants = new ArrayList<String>(other.participants);
      this.participants = __this__participants;
    }
    if (other.isSetParticipants_requests()) {
      List<String> __this__participants_requests = new ArrayList<String>(other.participants_requests);
      this.participants_requests = __this__participants_requests;
    }
    this.act_public = other.act_public;
  }

  public SportActivity deepCopy() {
    return new SportActivity(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.hostid = null;
    this.sport = null;
    this.area = null;
    this.cityid = null;
    setMax_participantsIsSet(false);
    this.max_participants = 0;
    setDateIsSet(false);
    this.date = 0;
    this.description = null;
    this.participants = null;
    this.participants_requests = null;
    setAct_publicIsSet(false);
    this.act_public = false;
  }

  public String getId() {
    return this.id;
  }

  public SportActivity setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getHostid() {
    return this.hostid;
  }

  public SportActivity setHostid(String hostid) {
    this.hostid = hostid;
    return this;
  }

  public void unsetHostid() {
    this.hostid = null;
  }

  /** Returns true if field hostid is set (has been assigned a value) and false otherwise */
  public boolean isSetHostid() {
    return this.hostid != null;
  }

  public void setHostidIsSet(boolean value) {
    if (!value) {
      this.hostid = null;
    }
  }

  public String getSport() {
    return this.sport;
  }

  public SportActivity setSport(String sport) {
    this.sport = sport;
    return this;
  }

  public void unsetSport() {
    this.sport = null;
  }

  /** Returns true if field sport is set (has been assigned a value) and false otherwise */
  public boolean isSetSport() {
    return this.sport != null;
  }

  public void setSportIsSet(boolean value) {
    if (!value) {
      this.sport = null;
    }
  }

  public String getArea() {
    return this.area;
  }

  public SportActivity setArea(String area) {
    this.area = area;
    return this;
  }

  public void unsetArea() {
    this.area = null;
  }

  /** Returns true if field area is set (has been assigned a value) and false otherwise */
  public boolean isSetArea() {
    return this.area != null;
  }

  public void setAreaIsSet(boolean value) {
    if (!value) {
      this.area = null;
    }
  }

  public String getCityid() {
    return this.cityid;
  }

  public SportActivity setCityid(String cityid) {
    this.cityid = cityid;
    return this;
  }

  public void unsetCityid() {
    this.cityid = null;
  }

  /** Returns true if field cityid is set (has been assigned a value) and false otherwise */
  public boolean isSetCityid() {
    return this.cityid != null;
  }

  public void setCityidIsSet(boolean value) {
    if (!value) {
      this.cityid = null;
    }
  }

  public int getMax_participants() {
    return this.max_participants;
  }

  public SportActivity setMax_participants(int max_participants) {
    this.max_participants = max_participants;
    setMax_participantsIsSet(true);
    return this;
  }

  public void unsetMax_participants() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_PARTICIPANTS_ISSET_ID);
  }

  /** Returns true if field max_participants is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_participants() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_PARTICIPANTS_ISSET_ID);
  }

  public void setMax_participantsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_PARTICIPANTS_ISSET_ID, value);
  }

  public long getDate() {
    return this.date;
  }

  public SportActivity setDate(long date) {
    this.date = date;
    setDateIsSet(true);
    return this;
  }

  public void unsetDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return EncodingUtils.testBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  public void setDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_ISSET_ID, value);
  }

  public String getDescription() {
    return this.description;
  }

  public SportActivity setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getParticipantsSize() {
    return (this.participants == null) ? 0 : this.participants.size();
  }

  public java.util.Iterator<String> getParticipantsIterator() {
    return (this.participants == null) ? null : this.participants.iterator();
  }

  public void addToParticipants(String elem) {
    if (this.participants == null) {
      this.participants = new ArrayList<String>();
    }
    this.participants.add(elem);
  }

  public List<String> getParticipants() {
    return this.participants;
  }

  public SportActivity setParticipants(List<String> participants) {
    this.participants = participants;
    return this;
  }

  public void unsetParticipants() {
    this.participants = null;
  }

  /** Returns true if field participants is set (has been assigned a value) and false otherwise */
  public boolean isSetParticipants() {
    return this.participants != null;
  }

  public void setParticipantsIsSet(boolean value) {
    if (!value) {
      this.participants = null;
    }
  }

  public int getParticipants_requestsSize() {
    return (this.participants_requests == null) ? 0 : this.participants_requests.size();
  }

  public java.util.Iterator<String> getParticipants_requestsIterator() {
    return (this.participants_requests == null) ? null : this.participants_requests.iterator();
  }

  public void addToParticipants_requests(String elem) {
    if (this.participants_requests == null) {
      this.participants_requests = new ArrayList<String>();
    }
    this.participants_requests.add(elem);
  }

  public List<String> getParticipants_requests() {
    return this.participants_requests;
  }

  public SportActivity setParticipants_requests(List<String> participants_requests) {
    this.participants_requests = participants_requests;
    return this;
  }

  public void unsetParticipants_requests() {
    this.participants_requests = null;
  }

  /** Returns true if field participants_requests is set (has been assigned a value) and false otherwise */
  public boolean isSetParticipants_requests() {
    return this.participants_requests != null;
  }

  public void setParticipants_requestsIsSet(boolean value) {
    if (!value) {
      this.participants_requests = null;
    }
  }

  public boolean isAct_public() {
    return this.act_public;
  }

  public SportActivity setAct_public(boolean act_public) {
    this.act_public = act_public;
    setAct_publicIsSet(true);
    return this;
  }

  public void unsetAct_public() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACT_PUBLIC_ISSET_ID);
  }

  /** Returns true if field act_public is set (has been assigned a value) and false otherwise */
  public boolean isSetAct_public() {
    return EncodingUtils.testBit(__isset_bitfield, __ACT_PUBLIC_ISSET_ID);
  }

  public void setAct_publicIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACT_PUBLIC_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case HOSTID:
      if (value == null) {
        unsetHostid();
      } else {
        setHostid((String)value);
      }
      break;

    case SPORT:
      if (value == null) {
        unsetSport();
      } else {
        setSport((String)value);
      }
      break;

    case AREA:
      if (value == null) {
        unsetArea();
      } else {
        setArea((String)value);
      }
      break;

    case CITYID:
      if (value == null) {
        unsetCityid();
      } else {
        setCityid((String)value);
      }
      break;

    case MAX_PARTICIPANTS:
      if (value == null) {
        unsetMax_participants();
      } else {
        setMax_participants((Integer)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((Long)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case PARTICIPANTS:
      if (value == null) {
        unsetParticipants();
      } else {
        setParticipants((List<String>)value);
      }
      break;

    case PARTICIPANTS_REQUESTS:
      if (value == null) {
        unsetParticipants_requests();
      } else {
        setParticipants_requests((List<String>)value);
      }
      break;

    case ACT_PUBLIC:
      if (value == null) {
        unsetAct_public();
      } else {
        setAct_public((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case HOSTID:
      return getHostid();

    case SPORT:
      return getSport();

    case AREA:
      return getArea();

    case CITYID:
      return getCityid();

    case MAX_PARTICIPANTS:
      return getMax_participants();

    case DATE:
      return getDate();

    case DESCRIPTION:
      return getDescription();

    case PARTICIPANTS:
      return getParticipants();

    case PARTICIPANTS_REQUESTS:
      return getParticipants_requests();

    case ACT_PUBLIC:
      return isAct_public();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case HOSTID:
      return isSetHostid();
    case SPORT:
      return isSetSport();
    case AREA:
      return isSetArea();
    case CITYID:
      return isSetCityid();
    case MAX_PARTICIPANTS:
      return isSetMax_participants();
    case DATE:
      return isSetDate();
    case DESCRIPTION:
      return isSetDescription();
    case PARTICIPANTS:
      return isSetParticipants();
    case PARTICIPANTS_REQUESTS:
      return isSetParticipants_requests();
    case ACT_PUBLIC:
      return isSetAct_public();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SportActivity)
      return this.equals((SportActivity)that);
    return false;
  }

  public boolean equals(SportActivity that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_hostid = true && this.isSetHostid();
    boolean that_present_hostid = true && that.isSetHostid();
    if (this_present_hostid || that_present_hostid) {
      if (!(this_present_hostid && that_present_hostid))
        return false;
      if (!this.hostid.equals(that.hostid))
        return false;
    }

    boolean this_present_sport = true && this.isSetSport();
    boolean that_present_sport = true && that.isSetSport();
    if (this_present_sport || that_present_sport) {
      if (!(this_present_sport && that_present_sport))
        return false;
      if (!this.sport.equals(that.sport))
        return false;
    }

    boolean this_present_area = true && this.isSetArea();
    boolean that_present_area = true && that.isSetArea();
    if (this_present_area || that_present_area) {
      if (!(this_present_area && that_present_area))
        return false;
      if (!this.area.equals(that.area))
        return false;
    }

    boolean this_present_cityid = true && this.isSetCityid();
    boolean that_present_cityid = true && that.isSetCityid();
    if (this_present_cityid || that_present_cityid) {
      if (!(this_present_cityid && that_present_cityid))
        return false;
      if (!this.cityid.equals(that.cityid))
        return false;
    }

    boolean this_present_max_participants = true && this.isSetMax_participants();
    boolean that_present_max_participants = true && that.isSetMax_participants();
    if (this_present_max_participants || that_present_max_participants) {
      if (!(this_present_max_participants && that_present_max_participants))
        return false;
      if (this.max_participants != that.max_participants)
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (this.date != that.date)
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_participants = true && this.isSetParticipants();
    boolean that_present_participants = true && that.isSetParticipants();
    if (this_present_participants || that_present_participants) {
      if (!(this_present_participants && that_present_participants))
        return false;
      if (!this.participants.equals(that.participants))
        return false;
    }

    boolean this_present_participants_requests = true && this.isSetParticipants_requests();
    boolean that_present_participants_requests = true && that.isSetParticipants_requests();
    if (this_present_participants_requests || that_present_participants_requests) {
      if (!(this_present_participants_requests && that_present_participants_requests))
        return false;
      if (!this.participants_requests.equals(that.participants_requests))
        return false;
    }

    boolean this_present_act_public = true && this.isSetAct_public();
    boolean that_present_act_public = true && that.isSetAct_public();
    if (this_present_act_public || that_present_act_public) {
      if (!(this_present_act_public && that_present_act_public))
        return false;
      if (this.act_public != that.act_public)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_hostid = true && (isSetHostid());
    list.add(present_hostid);
    if (present_hostid)
      list.add(hostid);

    boolean present_sport = true && (isSetSport());
    list.add(present_sport);
    if (present_sport)
      list.add(sport);

    boolean present_area = true && (isSetArea());
    list.add(present_area);
    if (present_area)
      list.add(area);

    boolean present_cityid = true && (isSetCityid());
    list.add(present_cityid);
    if (present_cityid)
      list.add(cityid);

    boolean present_max_participants = true && (isSetMax_participants());
    list.add(present_max_participants);
    if (present_max_participants)
      list.add(max_participants);

    boolean present_date = true && (isSetDate());
    list.add(present_date);
    if (present_date)
      list.add(date);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_participants = true && (isSetParticipants());
    list.add(present_participants);
    if (present_participants)
      list.add(participants);

    boolean present_participants_requests = true && (isSetParticipants_requests());
    list.add(present_participants_requests);
    if (present_participants_requests)
      list.add(participants_requests);

    boolean present_act_public = true && (isSetAct_public());
    list.add(present_act_public);
    if (present_act_public)
      list.add(act_public);

    return list.hashCode();
  }

  @Override
  public int compareTo(SportActivity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostid()).compareTo(other.isSetHostid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostid, other.hostid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSport()).compareTo(other.isSetSport());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSport()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sport, other.sport);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArea()).compareTo(other.isSetArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.area, other.area);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityid()).compareTo(other.isSetCityid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityid, other.cityid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_participants()).compareTo(other.isSetMax_participants());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_participants()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_participants, other.max_participants);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParticipants()).compareTo(other.isSetParticipants());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParticipants()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.participants, other.participants);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParticipants_requests()).compareTo(other.isSetParticipants_requests());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParticipants_requests()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.participants_requests, other.participants_requests);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAct_public()).compareTo(other.isSetAct_public());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAct_public()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.act_public, other.act_public);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SportActivity(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetHostid()) {
      if (!first) sb.append(", ");
      sb.append("hostid:");
      if (this.hostid == null) {
        sb.append("null");
      } else {
        sb.append(this.hostid);
      }
      first = false;
    }
    if (isSetSport()) {
      if (!first) sb.append(", ");
      sb.append("sport:");
      if (this.sport == null) {
        sb.append("null");
      } else {
        sb.append(this.sport);
      }
      first = false;
    }
    if (isSetArea()) {
      if (!first) sb.append(", ");
      sb.append("area:");
      if (this.area == null) {
        sb.append("null");
      } else {
        sb.append(this.area);
      }
      first = false;
    }
    if (isSetCityid()) {
      if (!first) sb.append(", ");
      sb.append("cityid:");
      if (this.cityid == null) {
        sb.append("null");
      } else {
        sb.append(this.cityid);
      }
      first = false;
    }
    if (isSetMax_participants()) {
      if (!first) sb.append(", ");
      sb.append("max_participants:");
      sb.append(this.max_participants);
      first = false;
    }
    if (isSetDate()) {
      if (!first) sb.append(", ");
      sb.append("date:");
      sb.append(this.date);
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetParticipants()) {
      if (!first) sb.append(", ");
      sb.append("participants:");
      if (this.participants == null) {
        sb.append("null");
      } else {
        sb.append(this.participants);
      }
      first = false;
    }
    if (isSetParticipants_requests()) {
      if (!first) sb.append(", ");
      sb.append("participants_requests:");
      if (this.participants_requests == null) {
        sb.append("null");
      } else {
        sb.append(this.participants_requests);
      }
      first = false;
    }
    if (isSetAct_public()) {
      if (!first) sb.append(", ");
      sb.append("act_public:");
      sb.append(this.act_public);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SportActivityStandardSchemeFactory implements SchemeFactory {
    public SportActivityStandardScheme getScheme() {
      return new SportActivityStandardScheme();
    }
  }

  private static class SportActivityStandardScheme extends StandardScheme<SportActivity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SportActivity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOSTID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostid = iprot.readString();
              struct.setHostidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sport = iprot.readString();
              struct.setSportIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.area = iprot.readString();
              struct.setAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CITYID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cityid = iprot.readString();
              struct.setCityidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAX_PARTICIPANTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_participants = iprot.readI32();
              struct.setMax_participantsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.date = iprot.readI64();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PARTICIPANTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                struct.participants = new ArrayList<String>(_list58.size);
                String _elem59;
                for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                {
                  _elem59 = iprot.readString();
                  struct.participants.add(_elem59);
                }
                iprot.readListEnd();
              }
              struct.setParticipantsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PARTICIPANTS_REQUESTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list61 = iprot.readListBegin();
                struct.participants_requests = new ArrayList<String>(_list61.size);
                String _elem62;
                for (int _i63 = 0; _i63 < _list61.size; ++_i63)
                {
                  _elem62 = iprot.readString();
                  struct.participants_requests.add(_elem62);
                }
                iprot.readListEnd();
              }
              struct.setParticipants_requestsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ACT_PUBLIC
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.act_public = iprot.readBool();
              struct.setAct_publicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SportActivity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hostid != null) {
        if (struct.isSetHostid()) {
          oprot.writeFieldBegin(HOSTID_FIELD_DESC);
          oprot.writeString(struct.hostid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sport != null) {
        if (struct.isSetSport()) {
          oprot.writeFieldBegin(SPORT_FIELD_DESC);
          oprot.writeString(struct.sport);
          oprot.writeFieldEnd();
        }
      }
      if (struct.area != null) {
        if (struct.isSetArea()) {
          oprot.writeFieldBegin(AREA_FIELD_DESC);
          oprot.writeString(struct.area);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cityid != null) {
        if (struct.isSetCityid()) {
          oprot.writeFieldBegin(CITYID_FIELD_DESC);
          oprot.writeString(struct.cityid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMax_participants()) {
        oprot.writeFieldBegin(MAX_PARTICIPANTS_FIELD_DESC);
        oprot.writeI32(struct.max_participants);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDate()) {
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeI64(struct.date);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.participants != null) {
        if (struct.isSetParticipants()) {
          oprot.writeFieldBegin(PARTICIPANTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.participants.size()));
            for (String _iter64 : struct.participants)
            {
              oprot.writeString(_iter64);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.participants_requests != null) {
        if (struct.isSetParticipants_requests()) {
          oprot.writeFieldBegin(PARTICIPANTS_REQUESTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.participants_requests.size()));
            for (String _iter65 : struct.participants_requests)
            {
              oprot.writeString(_iter65);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAct_public()) {
        oprot.writeFieldBegin(ACT_PUBLIC_FIELD_DESC);
        oprot.writeBool(struct.act_public);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SportActivityTupleSchemeFactory implements SchemeFactory {
    public SportActivityTupleScheme getScheme() {
      return new SportActivityTupleScheme();
    }
  }

  private static class SportActivityTupleScheme extends TupleScheme<SportActivity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SportActivity struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetHostid()) {
        optionals.set(1);
      }
      if (struct.isSetSport()) {
        optionals.set(2);
      }
      if (struct.isSetArea()) {
        optionals.set(3);
      }
      if (struct.isSetCityid()) {
        optionals.set(4);
      }
      if (struct.isSetMax_participants()) {
        optionals.set(5);
      }
      if (struct.isSetDate()) {
        optionals.set(6);
      }
      if (struct.isSetDescription()) {
        optionals.set(7);
      }
      if (struct.isSetParticipants()) {
        optionals.set(8);
      }
      if (struct.isSetParticipants_requests()) {
        optionals.set(9);
      }
      if (struct.isSetAct_public()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetHostid()) {
        oprot.writeString(struct.hostid);
      }
      if (struct.isSetSport()) {
        oprot.writeString(struct.sport);
      }
      if (struct.isSetArea()) {
        oprot.writeString(struct.area);
      }
      if (struct.isSetCityid()) {
        oprot.writeString(struct.cityid);
      }
      if (struct.isSetMax_participants()) {
        oprot.writeI32(struct.max_participants);
      }
      if (struct.isSetDate()) {
        oprot.writeI64(struct.date);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetParticipants()) {
        {
          oprot.writeI32(struct.participants.size());
          for (String _iter66 : struct.participants)
          {
            oprot.writeString(_iter66);
          }
        }
      }
      if (struct.isSetParticipants_requests()) {
        {
          oprot.writeI32(struct.participants_requests.size());
          for (String _iter67 : struct.participants_requests)
          {
            oprot.writeString(_iter67);
          }
        }
      }
      if (struct.isSetAct_public()) {
        oprot.writeBool(struct.act_public);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SportActivity struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hostid = iprot.readString();
        struct.setHostidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sport = iprot.readString();
        struct.setSportIsSet(true);
      }
      if (incoming.get(3)) {
        struct.area = iprot.readString();
        struct.setAreaIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cityid = iprot.readString();
        struct.setCityidIsSet(true);
      }
      if (incoming.get(5)) {
        struct.max_participants = iprot.readI32();
        struct.setMax_participantsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.date = iprot.readI64();
        struct.setDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list68 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.participants = new ArrayList<String>(_list68.size);
          String _elem69;
          for (int _i70 = 0; _i70 < _list68.size; ++_i70)
          {
            _elem69 = iprot.readString();
            struct.participants.add(_elem69);
          }
        }
        struct.setParticipantsIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.participants_requests = new ArrayList<String>(_list71.size);
          String _elem72;
          for (int _i73 = 0; _i73 < _list71.size; ++_i73)
          {
            _elem72 = iprot.readString();
            struct.participants_requests.add(_elem72);
          }
        }
        struct.setParticipants_requestsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.act_public = iprot.readBool();
        struct.setAct_publicIsSet(true);
      }
    }
  }

}

