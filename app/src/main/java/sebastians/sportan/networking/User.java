/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package sebastians.sportan.networking;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class User implements org.apache.thrift.TBase<User, User._Fields>, java.io.Serializable, Cloneable, Comparable<User> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("User");

  private static final org.apache.thrift.protocol.TField IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("identifier", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("role", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("profile", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField FRIENDS_FIELD_DESC = new org.apache.thrift.protocol.TField("friends", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField FRIENDREQUESTS_FIELD_DESC = new org.apache.thrift.protocol.TField("friendrequests", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField AREASVISITS_FIELD_DESC = new org.apache.thrift.protocol.TField("areasvisits", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField ANNOUNCED_ACTIVITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("announced_activities", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserTupleSchemeFactory());
  }

  public String identifier; // optional
  public String password; // optional
  public String role; // optional
  public Profile profile; // optional
  public Token token; // optional
  public List<String> friends; // optional
  public List<String> friendrequests; // optional
  public Map<Long,String> areasvisits; // optional
  public List<String> announced_activities; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IDENTIFIER((short)1, "identifier"),
    PASSWORD((short)2, "password"),
    ROLE((short)3, "role"),
    PROFILE((short)4, "profile"),
    TOKEN((short)5, "token"),
    FRIENDS((short)6, "friends"),
    FRIENDREQUESTS((short)7, "friendrequests"),
    AREASVISITS((short)8, "areasvisits"),
    ANNOUNCED_ACTIVITIES((short)9, "announced_activities");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IDENTIFIER
          return IDENTIFIER;
        case 2: // PASSWORD
          return PASSWORD;
        case 3: // ROLE
          return ROLE;
        case 4: // PROFILE
          return PROFILE;
        case 5: // TOKEN
          return TOKEN;
        case 6: // FRIENDS
          return FRIENDS;
        case 7: // FRIENDREQUESTS
          return FRIENDREQUESTS;
        case 8: // AREASVISITS
          return AREASVISITS;
        case 9: // ANNOUNCED_ACTIVITIES
          return ANNOUNCED_ACTIVITIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.IDENTIFIER,_Fields.PASSWORD,_Fields.ROLE,_Fields.PROFILE,_Fields.TOKEN,_Fields.FRIENDS,_Fields.FRIENDREQUESTS,_Fields.AREASVISITS,_Fields.ANNOUNCED_ACTIVITIES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("identifier", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLE, new org.apache.thrift.meta_data.FieldMetaData("role", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFILE, new org.apache.thrift.meta_data.FieldMetaData("profile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Profile.class)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Token.class)));
    tmpMap.put(_Fields.FRIENDS, new org.apache.thrift.meta_data.FieldMetaData("friends", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FRIENDREQUESTS, new org.apache.thrift.meta_data.FieldMetaData("friendrequests", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.AREASVISITS, new org.apache.thrift.meta_data.FieldMetaData("areasvisits", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ANNOUNCED_ACTIVITIES, new org.apache.thrift.meta_data.FieldMetaData("announced_activities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(User.class, metaDataMap);
  }

  public User() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public User(User other) {
    if (other.isSetIdentifier()) {
      this.identifier = other.identifier;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetRole()) {
      this.role = other.role;
    }
    if (other.isSetProfile()) {
      this.profile = new Profile(other.profile);
    }
    if (other.isSetToken()) {
      this.token = new Token(other.token);
    }
    if (other.isSetFriends()) {
      List<String> __this__friends = new ArrayList<String>(other.friends);
      this.friends = __this__friends;
    }
    if (other.isSetFriendrequests()) {
      List<String> __this__friendrequests = new ArrayList<String>(other.friendrequests);
      this.friendrequests = __this__friendrequests;
    }
    if (other.isSetAreasvisits()) {
      Map<Long,String> __this__areasvisits = new HashMap<Long,String>(other.areasvisits);
      this.areasvisits = __this__areasvisits;
    }
    if (other.isSetAnnounced_activities()) {
      List<String> __this__announced_activities = new ArrayList<String>(other.announced_activities);
      this.announced_activities = __this__announced_activities;
    }
  }

  public User deepCopy() {
    return new User(this);
  }

  @Override
  public void clear() {
    this.identifier = null;
    this.password = null;
    this.role = null;
    this.profile = null;
    this.token = null;
    this.friends = null;
    this.friendrequests = null;
    this.areasvisits = null;
    this.announced_activities = null;
  }

  public String getIdentifier() {
    return this.identifier;
  }

  public User setIdentifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

  public void unsetIdentifier() {
    this.identifier = null;
  }

  /** Returns true if field identifier is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentifier() {
    return this.identifier != null;
  }

  public void setIdentifierIsSet(boolean value) {
    if (!value) {
      this.identifier = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public User setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public String getRole() {
    return this.role;
  }

  public User setRole(String role) {
    this.role = role;
    return this;
  }

  public void unsetRole() {
    this.role = null;
  }

  /** Returns true if field role is set (has been assigned a value) and false otherwise */
  public boolean isSetRole() {
    return this.role != null;
  }

  public void setRoleIsSet(boolean value) {
    if (!value) {
      this.role = null;
    }
  }

  public Profile getProfile() {
    return this.profile;
  }

  public User setProfile(Profile profile) {
    this.profile = profile;
    return this;
  }

  public void unsetProfile() {
    this.profile = null;
  }

  /** Returns true if field profile is set (has been assigned a value) and false otherwise */
  public boolean isSetProfile() {
    return this.profile != null;
  }

  public void setProfileIsSet(boolean value) {
    if (!value) {
      this.profile = null;
    }
  }

  public Token getToken() {
    return this.token;
  }

  public User setToken(Token token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public int getFriendsSize() {
    return (this.friends == null) ? 0 : this.friends.size();
  }

  public java.util.Iterator<String> getFriendsIterator() {
    return (this.friends == null) ? null : this.friends.iterator();
  }

  public void addToFriends(String elem) {
    if (this.friends == null) {
      this.friends = new ArrayList<String>();
    }
    this.friends.add(elem);
  }

  public List<String> getFriends() {
    return this.friends;
  }

  public User setFriends(List<String> friends) {
    this.friends = friends;
    return this;
  }

  public void unsetFriends() {
    this.friends = null;
  }

  /** Returns true if field friends is set (has been assigned a value) and false otherwise */
  public boolean isSetFriends() {
    return this.friends != null;
  }

  public void setFriendsIsSet(boolean value) {
    if (!value) {
      this.friends = null;
    }
  }

  public int getFriendrequestsSize() {
    return (this.friendrequests == null) ? 0 : this.friendrequests.size();
  }

  public java.util.Iterator<String> getFriendrequestsIterator() {
    return (this.friendrequests == null) ? null : this.friendrequests.iterator();
  }

  public void addToFriendrequests(String elem) {
    if (this.friendrequests == null) {
      this.friendrequests = new ArrayList<String>();
    }
    this.friendrequests.add(elem);
  }

  public List<String> getFriendrequests() {
    return this.friendrequests;
  }

  public User setFriendrequests(List<String> friendrequests) {
    this.friendrequests = friendrequests;
    return this;
  }

  public void unsetFriendrequests() {
    this.friendrequests = null;
  }

  /** Returns true if field friendrequests is set (has been assigned a value) and false otherwise */
  public boolean isSetFriendrequests() {
    return this.friendrequests != null;
  }

  public void setFriendrequestsIsSet(boolean value) {
    if (!value) {
      this.friendrequests = null;
    }
  }

  public int getAreasvisitsSize() {
    return (this.areasvisits == null) ? 0 : this.areasvisits.size();
  }

  public void putToAreasvisits(long key, String val) {
    if (this.areasvisits == null) {
      this.areasvisits = new HashMap<Long,String>();
    }
    this.areasvisits.put(key, val);
  }

  public Map<Long,String> getAreasvisits() {
    return this.areasvisits;
  }

  public User setAreasvisits(Map<Long,String> areasvisits) {
    this.areasvisits = areasvisits;
    return this;
  }

  public void unsetAreasvisits() {
    this.areasvisits = null;
  }

  /** Returns true if field areasvisits is set (has been assigned a value) and false otherwise */
  public boolean isSetAreasvisits() {
    return this.areasvisits != null;
  }

  public void setAreasvisitsIsSet(boolean value) {
    if (!value) {
      this.areasvisits = null;
    }
  }

  public int getAnnounced_activitiesSize() {
    return (this.announced_activities == null) ? 0 : this.announced_activities.size();
  }

  public java.util.Iterator<String> getAnnounced_activitiesIterator() {
    return (this.announced_activities == null) ? null : this.announced_activities.iterator();
  }

  public void addToAnnounced_activities(String elem) {
    if (this.announced_activities == null) {
      this.announced_activities = new ArrayList<String>();
    }
    this.announced_activities.add(elem);
  }

  public List<String> getAnnounced_activities() {
    return this.announced_activities;
  }

  public User setAnnounced_activities(List<String> announced_activities) {
    this.announced_activities = announced_activities;
    return this;
  }

  public void unsetAnnounced_activities() {
    this.announced_activities = null;
  }

  /** Returns true if field announced_activities is set (has been assigned a value) and false otherwise */
  public boolean isSetAnnounced_activities() {
    return this.announced_activities != null;
  }

  public void setAnnounced_activitiesIsSet(boolean value) {
    if (!value) {
      this.announced_activities = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IDENTIFIER:
      if (value == null) {
        unsetIdentifier();
      } else {
        setIdentifier((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case ROLE:
      if (value == null) {
        unsetRole();
      } else {
        setRole((String)value);
      }
      break;

    case PROFILE:
      if (value == null) {
        unsetProfile();
      } else {
        setProfile((Profile)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((Token)value);
      }
      break;

    case FRIENDS:
      if (value == null) {
        unsetFriends();
      } else {
        setFriends((List<String>)value);
      }
      break;

    case FRIENDREQUESTS:
      if (value == null) {
        unsetFriendrequests();
      } else {
        setFriendrequests((List<String>)value);
      }
      break;

    case AREASVISITS:
      if (value == null) {
        unsetAreasvisits();
      } else {
        setAreasvisits((Map<Long,String>)value);
      }
      break;

    case ANNOUNCED_ACTIVITIES:
      if (value == null) {
        unsetAnnounced_activities();
      } else {
        setAnnounced_activities((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IDENTIFIER:
      return getIdentifier();

    case PASSWORD:
      return getPassword();

    case ROLE:
      return getRole();

    case PROFILE:
      return getProfile();

    case TOKEN:
      return getToken();

    case FRIENDS:
      return getFriends();

    case FRIENDREQUESTS:
      return getFriendrequests();

    case AREASVISITS:
      return getAreasvisits();

    case ANNOUNCED_ACTIVITIES:
      return getAnnounced_activities();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IDENTIFIER:
      return isSetIdentifier();
    case PASSWORD:
      return isSetPassword();
    case ROLE:
      return isSetRole();
    case PROFILE:
      return isSetProfile();
    case TOKEN:
      return isSetToken();
    case FRIENDS:
      return isSetFriends();
    case FRIENDREQUESTS:
      return isSetFriendrequests();
    case AREASVISITS:
      return isSetAreasvisits();
    case ANNOUNCED_ACTIVITIES:
      return isSetAnnounced_activities();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof User)
      return this.equals((User)that);
    return false;
  }

  public boolean equals(User that) {
    if (that == null)
      return false;

    boolean this_present_identifier = true && this.isSetIdentifier();
    boolean that_present_identifier = true && that.isSetIdentifier();
    if (this_present_identifier || that_present_identifier) {
      if (!(this_present_identifier && that_present_identifier))
        return false;
      if (!this.identifier.equals(that.identifier))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_role = true && this.isSetRole();
    boolean that_present_role = true && that.isSetRole();
    if (this_present_role || that_present_role) {
      if (!(this_present_role && that_present_role))
        return false;
      if (!this.role.equals(that.role))
        return false;
    }

    boolean this_present_profile = true && this.isSetProfile();
    boolean that_present_profile = true && that.isSetProfile();
    if (this_present_profile || that_present_profile) {
      if (!(this_present_profile && that_present_profile))
        return false;
      if (!this.profile.equals(that.profile))
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_friends = true && this.isSetFriends();
    boolean that_present_friends = true && that.isSetFriends();
    if (this_present_friends || that_present_friends) {
      if (!(this_present_friends && that_present_friends))
        return false;
      if (!this.friends.equals(that.friends))
        return false;
    }

    boolean this_present_friendrequests = true && this.isSetFriendrequests();
    boolean that_present_friendrequests = true && that.isSetFriendrequests();
    if (this_present_friendrequests || that_present_friendrequests) {
      if (!(this_present_friendrequests && that_present_friendrequests))
        return false;
      if (!this.friendrequests.equals(that.friendrequests))
        return false;
    }

    boolean this_present_areasvisits = true && this.isSetAreasvisits();
    boolean that_present_areasvisits = true && that.isSetAreasvisits();
    if (this_present_areasvisits || that_present_areasvisits) {
      if (!(this_present_areasvisits && that_present_areasvisits))
        return false;
      if (!this.areasvisits.equals(that.areasvisits))
        return false;
    }

    boolean this_present_announced_activities = true && this.isSetAnnounced_activities();
    boolean that_present_announced_activities = true && that.isSetAnnounced_activities();
    if (this_present_announced_activities || that_present_announced_activities) {
      if (!(this_present_announced_activities && that_present_announced_activities))
        return false;
      if (!this.announced_activities.equals(that.announced_activities))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_identifier = true && (isSetIdentifier());
    list.add(present_identifier);
    if (present_identifier)
      list.add(identifier);

    boolean present_password = true && (isSetPassword());
    list.add(present_password);
    if (present_password)
      list.add(password);

    boolean present_role = true && (isSetRole());
    list.add(present_role);
    if (present_role)
      list.add(role);

    boolean present_profile = true && (isSetProfile());
    list.add(present_profile);
    if (present_profile)
      list.add(profile);

    boolean present_token = true && (isSetToken());
    list.add(present_token);
    if (present_token)
      list.add(token);

    boolean present_friends = true && (isSetFriends());
    list.add(present_friends);
    if (present_friends)
      list.add(friends);

    boolean present_friendrequests = true && (isSetFriendrequests());
    list.add(present_friendrequests);
    if (present_friendrequests)
      list.add(friendrequests);

    boolean present_areasvisits = true && (isSetAreasvisits());
    list.add(present_areasvisits);
    if (present_areasvisits)
      list.add(areasvisits);

    boolean present_announced_activities = true && (isSetAnnounced_activities());
    list.add(present_announced_activities);
    if (present_announced_activities)
      list.add(announced_activities);

    return list.hashCode();
  }

  @Override
  public int compareTo(User other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIdentifier()).compareTo(other.isSetIdentifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identifier, other.identifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRole()).compareTo(other.isSetRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role, other.role);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfile()).compareTo(other.isSetProfile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, other.profile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFriends()).compareTo(other.isSetFriends());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFriends()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.friends, other.friends);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFriendrequests()).compareTo(other.isSetFriendrequests());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFriendrequests()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.friendrequests, other.friendrequests);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAreasvisits()).compareTo(other.isSetAreasvisits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAreasvisits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areasvisits, other.areasvisits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnnounced_activities()).compareTo(other.isSetAnnounced_activities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnounced_activities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.announced_activities, other.announced_activities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("User(");
    boolean first = true;

    if (isSetIdentifier()) {
      sb.append("identifier:");
      if (this.identifier == null) {
        sb.append("null");
      } else {
        sb.append(this.identifier);
      }
      first = false;
    }
    if (isSetPassword()) {
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
    }
    if (isSetRole()) {
      if (!first) sb.append(", ");
      sb.append("role:");
      if (this.role == null) {
        sb.append("null");
      } else {
        sb.append(this.role);
      }
      first = false;
    }
    if (isSetProfile()) {
      if (!first) sb.append(", ");
      sb.append("profile:");
      if (this.profile == null) {
        sb.append("null");
      } else {
        sb.append(this.profile);
      }
      first = false;
    }
    if (isSetToken()) {
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
    }
    if (isSetFriends()) {
      if (!first) sb.append(", ");
      sb.append("friends:");
      if (this.friends == null) {
        sb.append("null");
      } else {
        sb.append(this.friends);
      }
      first = false;
    }
    if (isSetFriendrequests()) {
      if (!first) sb.append(", ");
      sb.append("friendrequests:");
      if (this.friendrequests == null) {
        sb.append("null");
      } else {
        sb.append(this.friendrequests);
      }
      first = false;
    }
    if (isSetAreasvisits()) {
      if (!first) sb.append(", ");
      sb.append("areasvisits:");
      if (this.areasvisits == null) {
        sb.append("null");
      } else {
        sb.append(this.areasvisits);
      }
      first = false;
    }
    if (isSetAnnounced_activities()) {
      if (!first) sb.append(", ");
      sb.append("announced_activities:");
      if (this.announced_activities == null) {
        sb.append("null");
      } else {
        sb.append(this.announced_activities);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (profile != null) {
      profile.validate();
    }
    if (token != null) {
      token.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserStandardSchemeFactory implements SchemeFactory {
    public UserStandardScheme getScheme() {
      return new UserStandardScheme();
    }
  }

  private static class UserStandardScheme extends StandardScheme<User> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IDENTIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identifier = iprot.readString();
              struct.setIdentifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.role = iprot.readString();
              struct.setRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.profile = new Profile();
              struct.profile.read(iprot);
              struct.setProfileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.token = new Token();
              struct.token.read(iprot);
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FRIENDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.friends = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.friends.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setFriendsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FRIENDREQUESTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.friendrequests = new ArrayList<String>(_list3.size);
                String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.friendrequests.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setFriendrequestsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // AREASVISITS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                struct.areasvisits = new HashMap<Long,String>(2*_map6.size);
                long _key7;
                String _val8;
                for (int _i9 = 0; _i9 < _map6.size; ++_i9)
                {
                  _key7 = iprot.readI64();
                  _val8 = iprot.readString();
                  struct.areasvisits.put(_key7, _val8);
                }
                iprot.readMapEnd();
              }
              struct.setAreasvisitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ANNOUNCED_ACTIVITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.announced_activities = new ArrayList<String>(_list10.size);
                String _elem11;
                for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                {
                  _elem11 = iprot.readString();
                  struct.announced_activities.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setAnnounced_activitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, User struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.identifier != null) {
        if (struct.isSetIdentifier()) {
          oprot.writeFieldBegin(IDENTIFIER_FIELD_DESC);
          oprot.writeString(struct.identifier);
          oprot.writeFieldEnd();
        }
      }
      if (struct.password != null) {
        if (struct.isSetPassword()) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
      }
      if (struct.role != null) {
        if (struct.isSetRole()) {
          oprot.writeFieldBegin(ROLE_FIELD_DESC);
          oprot.writeString(struct.role);
          oprot.writeFieldEnd();
        }
      }
      if (struct.profile != null) {
        if (struct.isSetProfile()) {
          oprot.writeFieldBegin(PROFILE_FIELD_DESC);
          struct.profile.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.token != null) {
        if (struct.isSetToken()) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.friends != null) {
        if (struct.isSetFriends()) {
          oprot.writeFieldBegin(FRIENDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.friends.size()));
            for (String _iter13 : struct.friends)
            {
              oprot.writeString(_iter13);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.friendrequests != null) {
        if (struct.isSetFriendrequests()) {
          oprot.writeFieldBegin(FRIENDREQUESTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.friendrequests.size()));
            for (String _iter14 : struct.friendrequests)
            {
              oprot.writeString(_iter14);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.areasvisits != null) {
        if (struct.isSetAreasvisits()) {
          oprot.writeFieldBegin(AREASVISITS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRING, struct.areasvisits.size()));
            for (Map.Entry<Long, String> _iter15 : struct.areasvisits.entrySet())
            {
              oprot.writeI64(_iter15.getKey());
              oprot.writeString(_iter15.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.announced_activities != null) {
        if (struct.isSetAnnounced_activities()) {
          oprot.writeFieldBegin(ANNOUNCED_ACTIVITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.announced_activities.size()));
            for (String _iter16 : struct.announced_activities)
            {
              oprot.writeString(_iter16);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserTupleSchemeFactory implements SchemeFactory {
    public UserTupleScheme getScheme() {
      return new UserTupleScheme();
    }
  }

  private static class UserTupleScheme extends TupleScheme<User> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIdentifier()) {
        optionals.set(0);
      }
      if (struct.isSetPassword()) {
        optionals.set(1);
      }
      if (struct.isSetRole()) {
        optionals.set(2);
      }
      if (struct.isSetProfile()) {
        optionals.set(3);
      }
      if (struct.isSetToken()) {
        optionals.set(4);
      }
      if (struct.isSetFriends()) {
        optionals.set(5);
      }
      if (struct.isSetFriendrequests()) {
        optionals.set(6);
      }
      if (struct.isSetAreasvisits()) {
        optionals.set(7);
      }
      if (struct.isSetAnnounced_activities()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetIdentifier()) {
        oprot.writeString(struct.identifier);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetRole()) {
        oprot.writeString(struct.role);
      }
      if (struct.isSetProfile()) {
        struct.profile.write(oprot);
      }
      if (struct.isSetToken()) {
        struct.token.write(oprot);
      }
      if (struct.isSetFriends()) {
        {
          oprot.writeI32(struct.friends.size());
          for (String _iter17 : struct.friends)
          {
            oprot.writeString(_iter17);
          }
        }
      }
      if (struct.isSetFriendrequests()) {
        {
          oprot.writeI32(struct.friendrequests.size());
          for (String _iter18 : struct.friendrequests)
          {
            oprot.writeString(_iter18);
          }
        }
      }
      if (struct.isSetAreasvisits()) {
        {
          oprot.writeI32(struct.areasvisits.size());
          for (Map.Entry<Long, String> _iter19 : struct.areasvisits.entrySet())
          {
            oprot.writeI64(_iter19.getKey());
            oprot.writeString(_iter19.getValue());
          }
        }
      }
      if (struct.isSetAnnounced_activities()) {
        {
          oprot.writeI32(struct.announced_activities.size());
          for (String _iter20 : struct.announced_activities)
          {
            oprot.writeString(_iter20);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.identifier = iprot.readString();
        struct.setIdentifierIsSet(true);
      }
      if (incoming.get(1)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(2)) {
        struct.role = iprot.readString();
        struct.setRoleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.profile = new Profile();
        struct.profile.read(iprot);
        struct.setProfileIsSet(true);
      }
      if (incoming.get(4)) {
        struct.token = new Token();
        struct.token.read(iprot);
        struct.setTokenIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.friends = new ArrayList<String>(_list21.size);
          String _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readString();
            struct.friends.add(_elem22);
          }
        }
        struct.setFriendsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list24 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.friendrequests = new ArrayList<String>(_list24.size);
          String _elem25;
          for (int _i26 = 0; _i26 < _list24.size; ++_i26)
          {
            _elem25 = iprot.readString();
            struct.friendrequests.add(_elem25);
          }
        }
        struct.setFriendrequestsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map27 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.areasvisits = new HashMap<Long,String>(2*_map27.size);
          long _key28;
          String _val29;
          for (int _i30 = 0; _i30 < _map27.size; ++_i30)
          {
            _key28 = iprot.readI64();
            _val29 = iprot.readString();
            struct.areasvisits.put(_key28, _val29);
          }
        }
        struct.setAreasvisitsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.announced_activities = new ArrayList<String>(_list31.size);
          String _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = iprot.readString();
            struct.announced_activities.add(_elem32);
          }
        }
        struct.setAnnounced_activitiesIsSet(true);
      }
    }
  }

}

